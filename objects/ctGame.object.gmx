<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DECLARE AND INIT VARIABLES

//local vars
var i;
var j;
var currentLane;
var lanes;
var spawners
var numberOfSpawners

//other vars
//default difficulty for the time being
difficulty = GameDifficulty.normal
room_speed = 60
global.currentLane = 0;
//score reset
score = 0
global.gamestate = GameState.playing
global.kills = 0


backgrounder()
background_index[0] = bgSeaFloor

switch difficulty
{
    case GameDifficulty.facerrimo:
        numberOfSpawners = 3
        break
    case GameDifficulty.facil:
        numberOfSpawners = 3
        break
    case GameDifficulty.normal:
        numberOfSpawners = 6
        break
    case GameDifficulty.dificil:
        numberOfSpawners = 6
        break
    case GameDifficulty.hell:
        numberOfSpawners = 6
        break
}
global.lanes = ds_list_create();
SortListOfObjects(global.lanes, oLane)

global.spawners = ds_list_create();
SortListOfObjects(global.spawners, oSpawner)

for (i = 0; i &lt; ds_list_size(global.spawners); i += 1)
{
    if i &gt;= numberOfSpawners
    {
        instance_deactivate_object(global.spawners[| i]);
    }
}
/*for (i = 0; i &lt; instance_number(oLane); i += 1)
{
    var instance = instance_find(oLane,i);
    j = 0;
    if i &gt; 0
    {
        while global.lanes[| j].y &lt; instance.y &amp;&amp; ds_list_size(global.lanes) &gt; j
        {
            j = j + 1;
        }
    }
    ds_list_insert(global.lanes,j,instance);
}
  */ 

   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///controls

if keyboard_check_pressed(vk_escape){
    game_end()
}

if keyboard_check_pressed(ord("R")){
    room_restart()
}

if global.gamestate =  GameState.ended {
    if keyboard_check_pressed(vk_space){
        room_restart()
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ending game

if !instance_exists(oCastle){
    global.gamestate = GameState.ended
    playerEnterState(States.dead);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scoreSave</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load score
highscore = scoreLoad(difficulty)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw score
guiSize()


//score and highscore
setAligns(2,0)
var a = 0
draw_text(guiWidth, 0, "HI " + string(highscore) + "#" + string(score))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other drawings
switch global.gamestate{
    case GameState.ended:
        setAligns(1,1)
        draw_text(guiWidth/2, guiHeight/2, "GAME OVER!#Press SPACE to restart")
    break
    
    
}

///castle health draw
draw_set_halign(1)
var scaling = 4
if instance_exists(oCastle){
    var i,
        castleHP = oCastle.life,
        hearts = castleHP,
        extra = false,
        spacing = sprite_get_width(sHeart),
        ;
    if hearts &gt; 6 {
        hearts = 6
        extra = true
    }
    for (i = 0; i &lt; hearts; i++){
        draw_sprite_ext(sHeart, 0, 0  + (i * spacing * scaling), 0, scaling, scaling,0,c_white,1)
    }
    if extra{
        draw_text((1 + hearts) * scaling * spacing, 0, "x" + string(castleHP) )
    }
}
/*
var kills = string(global.kills)
draw_sprite_ext(sSkull, 0, 0, 8 * scaling, scaling, scaling, 0, c_white, 1)
draw_text(2 * scaling * 8 + 8, 8 * scaling + 4 , "x" + kills)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
